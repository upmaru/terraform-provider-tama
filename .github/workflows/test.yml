# Terraform Provider testing workflow.
name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  push:
    paths-ignore:
      - "README.md"

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      # We need the latest version of Terraform for our documentation generation to use
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false
      - run: make generate
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Terraform Provider Acceptance Tests
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      packages: read
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - "1.0.*"
          - "1.1.*"
          - "1.2.*"
          - "1.3.*"
          - "1.4.*"
    services:
      postgres:
        image: pgvector/pgvector:0.8.0-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tama_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      tama:
        image: ghcr.io/upmaru/tama:0.3-server
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/tama_test
          TAMA_MAX_VECTOR_DIMENSIONS: 1024
          TAMA_VAULT_KEY: MJOdb4sy3/xXzdYPDRZE3Jcj0gHx3utVsyCpCuTrRWM=
          SECRET_KEY_BASE: mmgb4Aoa2PphESQICdr31vVXHhvufcrXS7hDPK+mx8CWnNfWEDtthx6zD49L4Cqv
          PHX_SERVER: true
        ports:
          - 4000:4000
        options: --link postgres:postgres
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - name: Bootstrap Tama
        env:
          TAMA_BASE_URL: "http://localhost:4000"
          TAMA_API_KEY: "dummy"
        run: |
          terraform -chdir=scripts/setup init -upgrade
          terraform -chdir=scripts/setup apply -auto-approve
      - run: go mod download
      - env:
          TF_ACC: "1"
          TAMA_BASE_URL: "http://localhost:4000"
          TAMA_API_KEY: "dummy"
        run: |
          go test -v -cover ./...
        timeout-minutes: 30
